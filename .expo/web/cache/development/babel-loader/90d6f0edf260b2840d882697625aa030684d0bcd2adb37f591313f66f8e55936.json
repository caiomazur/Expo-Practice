{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { StatusBar } from \"expo-status-bar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageViewer from \"./components/ImageViewer\";\nimport Button from \"./components/Button\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { useState } from \"react\";\nimport CircleButton from \"./components/CircleButton\";\nimport IconButton from \"./components/IconButton\";\nimport EmojiPicker from \"./components/EmojiPicker\";\nimport EmojiList from \"./components/EmojiList\";\nimport EmojiSticker from \"./components/EmojiSticker\";\nimport { GestureHandlerRootView } from \"react-native-gesture-handler\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar PlaceholderImage = require(\"./assets/images/background-image.png\");\nexport default function App() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    selectedImage = _useState2[0],\n    setSelectedImage = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    showAppOptions = _useState4[0],\n    setShowAppOptions = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isModalVisible = _useState6[0],\n    setIsModalVisible = _useState6[1];\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    pickedEmoji = _useState8[0],\n    setPickedEmoji = _useState8[1];\n  var pickImageAsync = function () {\n    var _ref = _asyncToGenerator(function* () {\n      var result = yield ImagePicker.launchImageLibraryAsync({\n        allowsEditing: true,\n        quality: 1\n      });\n      if (!result.canceled) {\n        setSelectedImage(result.assets[0].uri);\n        setShowAppOptions(true);\n      } else {\n        alert(\"You did not select any image.\");\n      }\n    });\n    return function pickImageAsync() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var onReset = function onReset() {\n    setShowAppOptions(false);\n  };\n  var onAddSticker = function onAddSticker() {\n    setIsModalVisible(true);\n  };\n  var onModalClose = function onModalClose() {\n    setIsModalVisible(false);\n  };\n  var onSaveImageAsync = function () {\n    var _ref2 = _asyncToGenerator(function* () {});\n    return function onSaveImageAsync() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(GestureHandlerRootView, {\n    style: styles.container,\n    children: [_jsxs(View, {\n      style: styles.imageContainer,\n      children: [_jsx(ImageViewer, {\n        placeholderImageSource: PlaceholderImage,\n        selectedImage: selectedImage\n      }), pickedEmoji !== null ? _jsx(EmojiSticker, {\n        imageSize: 40,\n        stickerSource: pickedEmoji\n      }) : null]\n    }), showAppOptions ? _jsx(View, {\n      style: styles.optionsContainer,\n      children: _jsxs(View, {\n        style: styles.optionsRow,\n        children: [_jsx(IconButton, {\n          icon: \"refresh\",\n          label: \"Reset\",\n          onPress: onReset\n        }), _jsx(CircleButton, {\n          onPress: onAddSticker\n        }), _jsx(IconButton, {\n          icon: \"save-alt\",\n          label: \"Save\",\n          onPress: onSaveImageAsync\n        })]\n      })\n    }) : _jsxs(View, {\n      style: styles.footerContainer,\n      children: [_jsx(Button, {\n        theme: \"primary\",\n        label: \"Choose a photo\",\n        onPress: pickImageAsync\n      }), _jsx(Button, {\n        label: \"Use this photo\",\n        onPress: function onPress() {\n          return setShowAppOptions(true);\n        }\n      })]\n    }), _jsx(EmojiPicker, {\n      isVisible: isModalVisible,\n      onClose: onModalClose,\n      children: _jsx(EmojiList, {\n        onSelect: setPickedEmoji,\n        onCloseModal: onModalClose\n      })\n    }), _jsx(StatusBar, {\n      style: \"auto\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#25292e\",\n    alignItems: \"center\"\n  },\n  imageContainer: {\n    flex: 1,\n    paddingTop: 58\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: \"center\"\n  },\n  optionsContainer: {\n    position: \"absolute\",\n    bottom: 80\n  },\n  optionsRow: {\n    alignItems: \"center\",\n    flexDirection: \"row\"\n  }\n});","map":{"version":3,"names":["StatusBar","StyleSheet","Text","View","Image","ImageViewer","Button","ImagePicker","useState","CircleButton","IconButton","EmojiPicker","EmojiList","EmojiSticker","GestureHandlerRootView","jsx","_jsx","jsxs","_jsxs","PlaceholderImage","require","App","_useState","_useState2","_slicedToArray","selectedImage","setSelectedImage","_useState3","_useState4","showAppOptions","setShowAppOptions","_useState5","_useState6","isModalVisible","setIsModalVisible","_useState7","_useState8","pickedEmoji","setPickedEmoji","pickImageAsync","_ref","_asyncToGenerator","result","launchImageLibraryAsync","allowsEditing","quality","canceled","assets","uri","alert","apply","arguments","onReset","onAddSticker","onModalClose","onSaveImageAsync","_ref2","style","styles","container","children","imageContainer","placeholderImageSource","imageSize","stickerSource","optionsContainer","optionsRow","icon","label","onPress","footerContainer","theme","isVisible","onClose","onSelect","onCloseModal","create","flex","backgroundColor","alignItems","paddingTop","position","bottom","flexDirection"],"sources":["/home/caio/Documents/Code/expo-projects/Expo-Practice/App.js"],"sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport { StyleSheet, Text, View, Image } from \"react-native\";\nimport ImageViewer from \"./components/ImageViewer\";\nimport Button from \"./components/Button\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { useState } from \"react\";\nimport CircleButton from \"./components/CircleButton\";\nimport IconButton from \"./components/IconButton\";\nimport EmojiPicker from \"./components/EmojiPicker\";\nimport EmojiList from \"./components/EmojiList\";\nimport EmojiSticker from \"./components/EmojiSticker\";\nimport { GestureHandlerRootView } from \"react-native-gesture-handler\";\n\nconst PlaceholderImage = require(\"./assets/images/background-image.png\");\n\nexport default function App() {\n  // State variables\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [showAppOptions, setShowAppOptions] = useState(false);\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const [pickedEmoji, setPickedEmoji] = useState(null);\n\n  // Function to pick an image from the device's library\n  const pickImageAsync = async () => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      allowsEditing: true,\n      quality: 1,\n    });\n\n    if (!result.canceled) {\n      setSelectedImage(result.assets[0].uri);\n      setShowAppOptions(true);\n    } else {\n      alert(\"You did not select any image.\");\n    }\n  };\n\n  // Event handler for resetting the app options\n  const onReset = () => {\n    setShowAppOptions(false);\n  };\n\n  // Event handler for adding a sticker\n  const onAddSticker = () => {\n    setIsModalVisible(true);\n  };\n\n  // Event handler for closing the modal\n  const onModalClose = () => {\n    setIsModalVisible(false);\n  };\n\n  // Function to save the image\n  const onSaveImageAsync = async () => {\n    // will implement this later\n  };\n\n  return (\n    <GestureHandlerRootView style={styles.container}>\n      <View style={styles.imageContainer}>\n        {/* Component for displaying the selected image */}\n        <ImageViewer\n          placeholderImageSource={PlaceholderImage}\n          selectedImage={selectedImage}\n        />\n        {/* Component for displaying the selected emoji sticker */}\n        {pickedEmoji !== null ? (\n          <EmojiSticker imageSize={40} stickerSource={pickedEmoji} />\n        ) : null}\n      </View>\n\n      {/* Conditional rendering of app options */}\n      {showAppOptions ? (\n        <View style={styles.optionsContainer}>\n          <View style={styles.optionsRow}>\n            {/* Button for resetting */}\n            <IconButton icon=\"refresh\" label=\"Reset\" onPress={onReset} />\n            {/* Button for adding a sticker */}\n            <CircleButton onPress={onAddSticker} />\n            {/* Button for saving the image */}\n            <IconButton\n              icon=\"save-alt\"\n              label=\"Save\"\n              onPress={onSaveImageAsync}\n            />\n          </View>\n        </View>\n      ) : (\n        <View style={styles.footerContainer}>\n          {/* Button for choosing a photo */}\n          <Button\n            theme=\"primary\"\n            label=\"Choose a photo\"\n            onPress={pickImageAsync}\n          />\n          {/* Button for using the selected photo */}\n          <Button\n            label=\"Use this photo\"\n            onPress={() => setShowAppOptions(true)}\n          />\n        </View>\n      )}\n\n      {/* Emoji picker modal */}\n      <EmojiPicker isVisible={isModalVisible} onClose={onModalClose}>\n        {/* List of emojis to choose from */}\n        <EmojiList onSelect={setPickedEmoji} onCloseModal={onModalClose} />\n      </EmojiPicker>\n\n      <StatusBar style=\"auto\" />\n    </GestureHandlerRootView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#25292e\",\n    alignItems: \"center\",\n  },\n  imageContainer: {\n    flex: 1,\n    paddingTop: 58,\n  },\n  footerContainer: {\n    flex: 1 / 3,\n    alignItems: \"center\",\n  },\n  optionsContainer: {\n    position: \"absolute\",\n    bottom: 80,\n  },\n  optionsRow: {\n    alignItems: \"center\",\n    flexDirection: \"row\",\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}